{"version":3,"sources":["gridUtils.js","App.js","serviceWorker.js","index.js"],"names":["getGrid","gridSize","area","stars","initGrid","map","star","row","Array","length","fill","undefined","_loop","regionId","Math","floor","pow","random","regions","forEach","i","col","j","push","safeSpaces","region","space","isFilled","count","createAreas","grid","safeNums","Object","toConsumableArray","Set","_","filter","item","indexOf","JSON","stringify","parse","initStars","console","log","distro","colors","cellState","blank","marked","react_default","a","createElement","Clear_default","style","height","width","opacity","starred","Stars_default","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleModal","setState","modalOpen","state","checker","_this$state","tracker","level","rowCheck","includes","colCheck","areaCheck","z","checkProximity","isProx","pos","prox","alert","updateTracker","newTracker","current","resetTracker","_ref","_this2","_this$state2","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","display","defineProperty","background","concat","margin","justifyContent","alignItems","onClick","BottomNavigation_default","showLabels","BottomNavigationAction_default","label","icon","Info_default","Layers_default","Refresh_default","Modal_default","aria-labelledby","aria-describedby","open","onClose","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c76a3ca3.chunk.js","sourcesContent":["const getGrid = gridSize => {\n  const initStars = gridSize => {\n    let grid = [Math.floor(Math.random() * gridSize)]\n    while (grid.length < gridSize) {\n      const safeNums = [\n        ...new Set(\n          new Array(gridSize)\n            .fill(1)\n            .map((_, i) => i)\n            .filter(item => grid.indexOf(item) === -1)\n            .filter(item => item !== grid[grid.length - 1] + 1)\n            .filter(item => item !== grid[grid.length - 1] - 1)\n            .map(JSON.stringify),\n        ),\n      ].map(JSON.parse)\n      if (safeNums.length > 0) {\n        grid.push(safeNums[Math.floor(Math.random() * safeNums.length)])\n      } else {\n        grid = [Math.floor(Math.random() * gridSize)]\n      }\n    }\n    return grid\n  }\n\n  function printStars(stars = []) {\n    stars.forEach(item => {\n      let str = Array(stars.length).fill('.')\n      str[item] = `${item}`\n      console.log(str)\n    })\n  }\n  const grid = initStars(gridSize)\n  // console.log(grid)\n  // printStars(grid)\n  const createAreas = stars => {\n    const initGrid = stars.map(star => {\n      const row = Array(stars.length).fill(undefined)\n      row[star] = star\n      return row\n    })\n\n    while (!isFilled(initGrid)) {\n      //radomlly pick a region id\n      //   const regionId = Math.floor(Math.random() * stars.length);\n      const LEVEL = 50\n      // Biassedly pick region ID depending on level\n      const regionId = Math.floor(\n        stars.length * Math.pow(Math.random(), LEVEL / 110 + 0.1),\n      )\n\n      //find current regions\n      const regions = []\n      initGrid.forEach((row, i) =>\n        row.forEach((col, j) => {\n          if (col === regionId) {\n            regions.push([i, j])\n          }\n        }),\n      )\n      //find all of its safe spaces\n      const safeSpaces = []\n      regions.forEach(region => {\n        if (region[0] !== 0) {\n          //if not in first row\n          //check the top\n          if (initGrid[region[0] - 1][region[1]] === undefined) {\n            safeSpaces.push([region[0] - 1, region[1]])\n          }\n        }\n        if (region[0] !== stars.length - 1) {\n          //if not in last row\n          //check the botom\n          if (initGrid[region[0] + 1][region[1]] === undefined) {\n            safeSpaces.push([region[0] + 1, region[1]])\n          }\n        }\n        if (region[1] !== 0) {\n          //if not first column\n          //check the left\n          if (initGrid[region[0]][region[1] - 1] === undefined) {\n            safeSpaces.push([region[0], region[1] - 1])\n          }\n        }\n        if (region[1] !== stars.length - 1) {\n          //if not last column\n          //check the right\n          if (initGrid[region[0]][region[1] + 1] === undefined) {\n            safeSpaces.push([region[0], region[1] + 1])\n          }\n        }\n      })\n      if (safeSpaces.length) {\n        const space = safeSpaces[Math.floor(Math.random() * safeSpaces.length)]\n        initGrid[space[0]][space[1]] = regionId\n      }\n    }\n\n    function isFilled(initGrid) {\n      let count = 0\n      initGrid.forEach(row => {\n        row.forEach(col => {\n          if (col === undefined) {\n            count++\n          }\n        })\n      })\n\n      return !count\n    }\n    return initGrid\n  }\n  const area = createAreas(grid)\n\n  console.log(area)\n  const distro = []\n  area.forEach(row => row.forEach(col => (distro[col] = distro[col] + 1 || 1)))\n  console.log(distro)\n  return area\n}\n\nexport default getGrid\n","import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport Modal from '@material-ui/core/Modal'\nimport InfoIcon from '@material-ui/icons/Info'\nimport LayersIcon from '@material-ui/icons/Layers'\nimport StarsIcon from '@material-ui/icons/Stars'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport getGrid from './gridUtils'\nimport './App.css'\n\nconst colors = [\n  '#f9e79f',\n  '#a9dfbf',\n  '#a3e4d7',\n  '#a9cce3',\n  '#d7bde2',\n  '#e6b0aa',\n  '#edbb99',\n  '#fad7a0',\n  '#a2d9ce',\n  '#aed6f1',\n  '#d2b4de',\n  '#f5b7b1',\n]\n\nconst cellState = {\n  blank: '',\n  marked: <ClearIcon style={{ height: '80%', width: '80%', opacity: '0.3' }} />,\n  starred: <StarsIcon style={{ height: '80%', width: '80%' }} />,\n}\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    const LEVEL = 10\n    const tracker = [\n      ...Array(LEVEL)\n        .fill(1)\n        .map(item => Array(LEVEL).fill('blank')),\n    ]\n    this.state = {\n      tracker,\n      level: LEVEL,\n      modalOpen: false,\n      grid: getGrid(LEVEL),\n    }\n  }\n\n  toggleModal = () => this.setState({ modalOpen: !this.state.modalOpen })\n  checker = () => {\n    const { tracker, grid, level } = this.state\n    // check if there are >= LEVEL starred\n\n    let stars = 0\n    tracker.forEach(\n      row =>\n        row.forEach(col => {\n          if (col === 'starred') {\n            stars++\n          }\n        }),\n      0,\n    )\n    // console.log(stars)\n    // check each row\n    const rowCheck = !tracker\n      .map(row => row.filter(col => col === 'starred'))\n      .map(row => row.length === 1)\n      .includes(false)\n\n    // check each column\n    const colCheck = !tracker\n      .map((row, i) => row.map((col, j) => tracker[j][i] === 'starred'))\n      .map(row => row.filter(col => col))\n      .map(row => row.length === 1)\n      .includes(false)\n\n    // check each area\n    let areaCheck = Array(level).fill(0)\n    grid.forEach((row, z) => {\n      grid.forEach((row, i) =>\n        row.forEach((col, j) => {\n          if (grid[i][j] === z && tracker[i][j] === 'starred') {\n            areaCheck[z] = areaCheck[z] + 1\n          }\n        }),\n      )\n    })\n    areaCheck = areaCheck.filter(area => area === 1).length === level\n\n    // check proximity\n    const checkProximity = tracker => {\n      // get all cords of stars\n      const stars = []\n      tracker.forEach((row, i) =>\n        row.forEach((col, j) => {\n          if (col === 'starred') {\n            stars.push([i, j])\n          }\n        }),\n      )\n\n      // check if they are in prox of each other\n      let isProx = true\n      stars.forEach(pos => {\n        // get all prox for pos\n        const prox = []\n        prox.push([pos[0] - 1, pos[1]])\n        prox.push([pos[0] - 1, pos[1] - 1])\n        prox.push([pos[0], pos[1] - 1])\n        prox.push([pos[0] + 1, pos[1] - 1])\n        prox.push([pos[0] + 1, pos[1]])\n        prox.push([pos[0] + 1, pos[1] + 1])\n        prox.push([pos[0], pos[1] + 1])\n        prox.push([pos[0] - 1, pos[1] + 1])\n        console.log('stars', stars, 'prox', prox)\n\n        prox.forEach(pos => {\n          return stars.forEach(star => {\n            if (JSON.stringify(pos) === JSON.stringify(star)) {\n              isProx = false\n            }\n          })\n        })\n      })\n      return isProx\n    }\n    console.log(rowCheck && colCheck && areaCheck && checkProximity(tracker))\n    if (rowCheck && colCheck && areaCheck && checkProximity(tracker)) {\n      alert('you win!')\n    }\n  }\n  updateTracker = (i, j) => () => {\n    const { tracker } = this.state\n    const newTracker = [...tracker]\n    const current = tracker[i][j]\n    if (current === 'blank') {\n      newTracker[i][j] = 'marked'\n    }\n    if (current === 'marked') {\n      newTracker[i][j] = 'starred'\n    }\n    if (current === 'starred') {\n      newTracker[i][j] = 'blank'\n    }\n    this.setState({ tracker: newTracker })\n    this.checker()\n  }\n\n  resetTracker = () =>\n    this.setState({\n      tracker: [\n        ...Array(this.state.level)\n          .fill(1)\n          .map(item => Array(this.state.level).fill('blank')),\n      ],\n    })\n\n  render() {\n    const { grid, level, tracker } = this.state\n    return (\n      <div className='App'>\n        <AppBar className='appBar' position='static'>\n          <Toolbar>\n            <Typography variant='h6' color='inherit'>\n              ★ Star Battle\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div\n          style={{\n            display: 'block',\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: '20px 5px 5px 0',\n            justifyContent: 'center',\n          }}\n        >\n          {grid.map((row, i) =>\n            row.map((col, j) => (\n              <div\n                style={{\n                  background: colors[col],\n                  width: `${90 / level}vw`,\n                  height: `${90 / level}vw`,\n                  margin: '1px',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n                onClick={this.updateTracker(i, j)}\n              >\n                {cellState[tracker[i][j]]}\n              </div>\n            )),\n          )}\n        </div>\n        <BottomNavigation className='navbar' showLabels>\n          <BottomNavigationAction\n            label='About'\n            icon={<InfoIcon />}\n            onClick={this.toggleModal}\n          />\n          <BottomNavigationAction\n            label='Level 1'\n            icon={<LayersIcon />}\n            onClick={() => {}}\n          />{' '}\n          <BottomNavigationAction\n            label='Reset'\n            icon={<RefreshIcon />}\n            onClick={this.resetTracker}\n          />\n        </BottomNavigation>\n        <Modal\n          aria-labelledby='simple-modal-title'\n          aria-describedby='simple-modal-description'\n          open={this.state.modalOpen}\n          onClose={this.toggleModal}\n        >\n          <div className='modal'>hi this is modal </div>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}