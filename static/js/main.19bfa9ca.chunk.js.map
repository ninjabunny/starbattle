{"version":3,"sources":["gridUtils.js","App.js","serviceWorker.js","index.js"],"names":["getGrid","gridSize","area","stars","initGrid","map","star","row","Array","length","fill","undefined","_loop","regionId","Math","floor","random","regions","forEach","i","col","j","push","safeSpaces","region","space","isFilled","count","createAreas","grid","safeNums","Object","toConsumableArray","Set","_","filter","item","indexOf","JSON","stringify","parse","initStars","console","log","distro","App","state","level","modalOpen","toggleModal","_this","setState","_ref","this","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","style","display","defineProperty","background","width","BottomNavigation_default","showLabels","BottomNavigationAction_default","label","icon","Info_default","onClick","Refresh_default","Modal_default","aria-labelledby","aria-describedby","open","onClose","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19bfa9ca.chunk.js","sourcesContent":["const getGrid = gridSize => {\n  const initStars = gridSize => {\n    let grid = [Math.floor(Math.random() * gridSize)];\n    while (grid.length < gridSize) {\n      const safeNums = [\n        ...new Set(\n          new Array(gridSize)\n            .fill(1)\n            .map((_, i) => i)\n            .filter(item => grid.indexOf(item) === -1)\n            .filter(item => item !== grid[grid.length - 1] + 1)\n            .filter(item => item !== grid[grid.length - 1] - 1)\n            .map(JSON.stringify)\n        )\n      ].map(JSON.parse);\n      if (safeNums.length > 0) {\n        grid.push(safeNums[Math.floor(Math.random() * safeNums.length)]);\n      } else {\n        grid = [Math.floor(Math.random() * gridSize)];\n      }\n    }\n    return grid;\n  };\n\n  function printStars(stars = []) {\n    stars.forEach(item => {\n      let str = Array(stars.length).fill(\".\");\n      str[item] = `${item}`;\n      console.log(str);\n    });\n  }\n  const grid = initStars(gridSize);\n  // console.log(grid)\n  // printStars(grid)\n  const createAreas = stars => {\n    const initGrid = stars.map(star => {\n      const row = Array(stars.length).fill(undefined);\n      row[star] = star;\n      return row;\n    });\n\n    while (!isFilled(initGrid)) {\n      //radomlly pick a region id\n      const regionId = Math.floor(Math.random() * stars.length);\n      //find current regions\n      const regions = [];\n      initGrid.forEach((row, i) =>\n        row.forEach((col, j) => {\n          if (col === regionId) {\n            regions.push([i, j]);\n          }\n        })\n      );\n      //find all of its safe spaces\n      const safeSpaces = [];\n      regions.forEach(region => {\n        if (region[0] !== 0) {\n          //if not in first row\n          //check the top\n          if (initGrid[region[0] - 1][region[1]] === undefined) {\n            safeSpaces.push([region[0] - 1, region[1]]);\n          }\n        }\n        if (region[0] !== stars.length - 1) {\n          //if not in last row\n          //check the botom\n          if (initGrid[region[0] + 1][region[1]] === undefined) {\n            safeSpaces.push([region[0] + 1, region[1]]);\n          }\n        }\n        if (region[1] !== 0) {\n          //if not first column\n          //check the left\n          if (initGrid[region[0]][region[1] - 1] === undefined) {\n            safeSpaces.push([region[0], region[1] - 1]);\n          }\n        }\n        if (region[1] !== stars.length - 1) {\n          //if not last column\n          //check the right\n          if (initGrid[region[0]][region[1] + 1] === undefined) {\n            safeSpaces.push([region[0], region[1] + 1]);\n          }\n        }\n      });\n      if (safeSpaces.length) {\n        const space = safeSpaces[Math.floor(Math.random() * safeSpaces.length)];\n        initGrid[space[0]][space[1]] = regionId;\n      }\n    }\n\n    function isFilled(initGrid) {\n      let count = 0;\n      initGrid.forEach(row => {\n        row.forEach(col => {\n          if (col === undefined) {\n            count++;\n          }\n        });\n      });\n\n      return !count;\n    }\n    return initGrid;\n  };\n  const area = createAreas(grid);\n\n  console.log(area);\n  const distro = [];\n  area.forEach(row => row.forEach(col => (distro[col] = distro[col] + 1 || 1)));\n  console.log(distro);\n  return area;\n};\n\nexport default getGrid;\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport Modal from \"@material-ui/core/Modal\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport getGrid from \"./gridUtils\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    level: 6,\n    modalOpen: false,\n    grid: getGrid(6)\n  };\n\n  toggleModal = () => this.setState({ modalOpen: !this.state.modalOpen });\n\n  render() {\n    const { grid } = this.state;\n    console.log(\"grid\", grid);\n    return (\n      <div className=\"App\">\n        <AppBar className=\"appBar\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              â˜… Star Battle\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div style={{ display: \"block\", display: \"flex\", flexWrap: \"wrap\" }}>\n          {grid.map(row =>\n            row.map(col => (\n              <div\n                style={{\n                  background: \"grey\",\n                  width: \"20px\"\n                }}\n              >\n                x\n              </div>\n            ))\n          )}\n        </div>\n        <BottomNavigation className=\"navbar\" showLabels>\n          <BottomNavigationAction\n            label=\"About\"\n            icon={<InfoIcon />}\n            onClick={this.toggleModal}\n          />\n          <BottomNavigationAction\n            label=\"Points\"\n            icon={<InfoIcon />}\n            onClick={() => {}}\n          />{\" \"}\n          <BottomNavigationAction\n            label=\"Reset\"\n            icon={<RefreshIcon />}\n            onClick={() => {}}\n          />\n        </BottomNavigation>\n        <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.state.modalOpen}\n          onClose={this.toggleModal}\n        >\n          <div className=\"modal\">hi this is modal </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}